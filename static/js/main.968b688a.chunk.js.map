{"version":3,"sources":["Components/FormScreen/index.tsx","Components/MapScreen/index.tsx","Components/API/index.ts","Components/SVGMapScreen/index.tsx","Components/Home/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormScreen","useState","deviceId","setDeviceId","sensorId","setSensorId","ButtonActive","setButtonActive","className","type","id","placeholder","required","value","onChange","e","target","length","to","MapsAPIkey","process","REACT_APP_GOOGLE_API_KEY","initialMarker","lat","lng","mapStyles","width","height","padding","GoogleApiWrapper","apiKey","props","console","log","google","style","initialCenter","instance","axios","create","baseURL","api","fetchData","device_id","headers","method","url","data","devid","SVGMapScreen","useParams","sensor_id","Error","setError","MarkerData","setMarkerData","TextVisible","setTextVisible","then","response","hasOwnProperty","latitude","longitude","catch","error","projection","projectionConfig","scale","zoom","geography","geographies","map","geo","fill","stroke","rsmKey","coordinates","onClick","strokeWidth","strokeLinecap","strokeLinejoin","transform","cx","cy","r","d","textAnchor","y","fontFamily","Home","href","App","Nav","variant","justify","Item","backgroundColor","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.968b688a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport './style.css';\n\nconst FormScreen = () => {\n    const [deviceId, setDeviceId] = useState<string>();\n  const [sensorId, setSensorId] = useState<string>();\n  const [ButtonActive, setButtonActive] = useState<boolean>(false)\n    return (\n      <div className=\"form-screen\">\n        <input\n          type=\"text\"\n          id=\"InputDeviceID\"\n          className=\"input-box\"\n          placeholder=\"Device ID\"\n          required={true}\n          value={deviceId}\n          onChange={(e) => {\n            setDeviceId(e.target.value);\n            if(e.target.value.length > 0) setButtonActive(true);\n          }}\n        ></input>\n        <input\n          type=\"text\"\n          id=\"InputSensorID\"\n          className=\"input-box\"\n          placeholder=\"Sensor ID\"\n          required={true}\n          value={sensorId}\n          onChange={(e) => {\n            setSensorId(e.target.value);\n            if (e.target.value.length > 0) setButtonActive(true);\n          }}\n        ></input>\n        <Link\n          to={\n            ButtonActive\n              ? `/distronix_front-end-test/map/${deviceId}/${sensorId}`\n              : \"#\"\n          }\n          className=\"submit-button\"\n        >\n          See on Google Map\n        </Link>\n        <Link\n          to={\n            ButtonActive\n              ? `/distronix_front-end-test/map-alt/${deviceId}/${sensorId}`\n              : \"#\"\n          }\n          className=\"submit-button\"\n        >\n          See on Alternative Map\n        </Link>\n      </div>\n    );\n}\n\nexport default FormScreen;","import React from 'react';\n//import { useParams } from 'react-router-dom';\nimport './style.css';\n\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\n\nconst MapsAPIkey: string = typeof process.env.REACT_APP_GOOGLE_API_KEY !== 'string' ? '' : process.env.REACT_APP_GOOGLE_API_KEY;\nconst initialMarker = {\n    lat: 47.44,\n    lng: -122.176,\n}\n\nconst MapScreen = (props: any) => {\n  //const { device_id, sensor_id } = useParams();\n  console.log(MapsAPIkey);\n  //const [Marker, setMarker] = useState<{ lat: number; lng: number }>(initialMarker);\n    if (MapsAPIkey === '') return (\n        <div className=\"error-screen\">Please setup the Google Maps API key.</div>\n    )\n    return (\n      <div className=\"map-wrapper\">\n        <div className=\"error-screen\">\n          Following is the Google Maps API key. {MapsAPIkey}\n        </div>\n        <Map\n          google={props.google}\n          style={mapStyles}\n          initialCenter={initialMarker}\n        ></Map>\n      </div>\n    );\n}\n\nconst mapStyles = {\n    width: '100%',\n    height: '100%',\n    padding: 20,\n}\n\nexport default GoogleApiWrapper({\n    apiKey: MapsAPIkey\n})(MapScreen);","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"http://nkda.swm.distronix.in:3000/api/v1.1/devstat/lastMultiple\",\n});\n\nconst api = {\n  fetchData: (device_id: string) =>\n    instance({\n      headers: {\n        \"Content-Type\": \"x-www-form-urlencoded\",\n      },\n      method: \"POST\",\n      url: \"/\",\n      data: {\n        devid: device_id,\n      },\n    }),\n};\n\nexport default api;","//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  ZoomableGroup\n} from \"react-simple-maps\";\nimport './styles.css';\nimport api from '../API';\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst SVGMapScreen = () => {\n  const { device_id, sensor_id } = useParams<{ device_id: string; sensor_id: string }>();\n  const [Error, setError] = useState<string>(\"\");\n  const [MarkerData, setMarkerData] = useState<{ lat: number; lng: number }>();\n  const [TextVisible, setTextVisible] = useState<boolean>(false)\n  api.fetchData(device_id).then((response) => {\n    const data = response.data;\n    if (data.hasOwnProperty('latitude') && data.hasOwnProperty('longitude')) setMarkerData({ lat: data.latitude, lng: data.longitude });\n    else setError(\"Bad Response\");\n  }).catch(error => setError(error));\n    return (\n      <div style={{}}>\n        {Error.length > 0 ? (\n          <div className=\"error-screen\">\n            Some Error occurred. Error: {Error}\n          </div>\n        ) : (\n          <ComposableMap\n            projection=\"geoEqualEarth\"\n            projectionConfig={{\n              scale: 150,\n            }}\n          >\n            <ZoomableGroup zoom={1}>\n              <Geographies\n                geography={geoUrl}\n                style={{ width: \"100%\", height: \"80%\" }}\n              >\n                {({ geographies }) =>\n                  geographies.map((geo) => (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill=\"#DDD\"\n                      stroke=\"#FFF\"\n                    />\n                  ))\n                }\n              </Geographies>\n              {typeof MarkerData !== \"undefined\" &&\n              typeof MarkerData.lat !== \"undefined\" &&\n              typeof MarkerData.lng !== \"undefined\" ? (\n                <Marker\n                  coordinates={[MarkerData?.lat, MarkerData?.lng]}\n                      fill=\"#b30000\"\n                      onClick={() => setTextVisible(!TextVisible)}\n                >\n                  <g\n                    fill=\"none\"\n                    stroke=\"#FF5533\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    transform=\"translate(-12, -24)\"\n                  >\n                    <circle cx=\"12\" cy=\"10\" r=\"3\" />\n                    <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n                  </g>\n                  {TextVisible ? (\n                    <text\n                      textAnchor=\"middle\"\n                      y={-35}\n                      style={{ fontFamily: \"system-ui\", fill: \"#5D5A6D\" }}\n                    >\n                      {sensor_id}\n                    </text>\n                  ) : null}\n                </Marker>\n              ) : null}\n            </ZoomableGroup>\n          </ComposableMap>\n        )}\n      </div>\n    );\n}\n\nexport default SVGMapScreen;","import React from 'react';\n\nconst Home = () => {\n    return (\n        <div className=\"Home-content\">\n            <h1>Distronix: Front End Tests</h1>\n            <p>This test is developed for the fulfillment of front end test for Distronix. Please visit the github repository at <a href=\"https://github.com/krishnapaul242/distronix_front-end-test\">https://github.com/krishnapaul242/distronix_front-end-test</a></p>\n        </div>\n    );\n}\nexport default Home;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport FormScreen from './Components/FormScreen';\nimport MapScreen from './Components/MapScreen';\nimport SVGMapScreen from './Components/SVGMapScreen';\nimport Nav from \"react-bootstrap/Nav\";\nimport Home from './Components/Home';\n\nconst testDevice: string = \"\"; \n\nfunction App() {\n  return (\n    <Router>\n      <Nav variant=\"tabs\" justify={true}>\n        <Nav.Item>\n          <Link to=\"/distronix_front-end-test\">Home</Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Link to=\"/distronix_front-end-test/select-sensor\">\n            Select Sensor\n          </Link>\n        </Nav.Item>\n        <Link to={`/distronix_front-end-test/map/${testDevice}`}>\n          Google Map\n        </Link>\n        <Nav.Item>\n          <Link to={`/distronix_front-end-test/map-alt/${testDevice}`}>\n            Alternative Map\n          </Link>\n        </Nav.Item>\n      </Nav>\n      <div style={{ backgroundColor: \"#cde543\" }}>\n        <Switch>\n          <Route exact path=\"/distronix_front-end-test/\">\n            <Home />\n          </Route>\n          <Route path=\"/distronix_front-end-test/select-sensor\">\n            <FormScreen />\n          </Route>\n          <Route path=\"/distronix_front-end-test/map\">\n            <MapScreen />\n          </Route>\n          <Route path=\"/distronix_front-end-test/map-alt\">\n            <SVGMapScreen />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}